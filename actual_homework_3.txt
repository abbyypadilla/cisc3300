Actual Homework 3
10.02.24

1. JavaScript - lightweight interpreted programming language commonly used by web developers 
   to add dynamic interactions to web pages, applications, servers, and even games. 
   An interpreted programming language differs from that of a compiled by what happens to the 
   source code. In a complied language, the program, once compiled, is expressed in the 
   instructions of the target machine. This machine code is undecipherable by humans. Thus, a 
   compile step is required. A few examples of this language are C, C++, and Java. On the other 
   hand, in an interpreted language, the source code is not directly translated by the target 
   machine. Instead, a different program, known as the interpreter, reads and executes the code. 
   A few examples of this language are JS, Python, PHP, and bash.
2. Dynamically typed programming languages perform type checking at runtime, meaning that the 
   type of a variable is allowed to change over its lifetime. This provides flexibility and ease 
   of use, making these languages ideal for rapid prototyping and development. However, the 
   downside is that type-related errors may only become apparent during execution, making 
   debugging more difficult. Examples of dynamically typed languages include Python, JavaScript, 
   and Ruby. In contrast, statically typed programming languages recognize different data types 
   (numbers, strings, etc.), but do not use them too strictly, trying to convert data when it 
   seems reasonable. Because they enforce type checking at compile-time, variables have to be 
   declared with a specific type, which cannot change later. This early type checking helps catch 
   errors during compilation, resulting in more robust and reliable code. However, it can be less 
   flexible. Common statically typed languages include Java, C++, and Swift.
   Strongly typed programming languages maintain strict rules about how different data types can 
   interact, refusing to allow implicit type conversions that might lead to unintended behavior. 
   This ensures safer code by reducing type-related errors. Python and Java are examples of 
   strongly typed languages. In contrast, weakly typed languages are more permissive and allow 
   implicit type conversions, which can introduce unexpected results. While this flexibility 
   may make it easier to write quick scripts, it can lead to type coercion bugs and unexpected 
   behavior. JavaScript and PHP are examples of weakly typed languages. 
3. When declaring variables in JS, var, let, and const are all different keywords for this. Var 
   has a global and function scope, and is more old school, as it was formerly the only way of 
   declaring variables before let and const were introduced in ES6. It is redeclarable like let, 
   but let is only block scoped. Const is block scoped as well, but not redeclarable. Let and const 
   were both created to address shortcomings of var, but because they are block scoped, they can 
   only exist and be accessible within the block they are created in. 
4. Anonymous function are simply functions without a name. Higher-order functions are functions 
   that return a function or take other functions as arguments. This enables more abstract and 
   resuable code. Callback functions are passed as an argument to another function to be called 
   later. These are often utilized in asynchronous programming or event handling scenarios.
   First-class functions are functions in that language are treated like other variables, so they 
   can be stored, passed, and returned, making them extremely versatile.
5. Objects in JavaScript are a non-primitive data type used to store collections of related data 
   and more complex entities. A single object is a collection of properties, where each property 
   is an association between a name (or key) and a value. The value of a property can be a string, 
   number, array, or even another object, allowing for highly structured and hierarchical data. 
   When a property's value is a function, that property is called a method and can be used to 
   define behaviors for the object. This capability makes objects fundamental for modeling 
   real-world entities and their interactions, supporting a powerful, object-oriented approach.

