Homework-5
Abby Padilla
10.16.24

1. HTTP - Hyper Text Transfer Protocol - protocol for fetching resources such as HTML documents 
   or JSON data, being the foundation of any data exchange on the Web. Being a client-server
   protocol, requests are initiated by the recipient, usually the Web browser. It is how the 
   internet handles communication between clients and servers, done by requests and responses.
   Therefore, it is how data is sent and received across the internet. 
   There different HTTP request methods, differing from one another by semantic meaning.
   GET - should only ever retrieve data, and can include information to the server in the form 
   of query strings (name/value pairs) that are sent in the URL of such request
   POST - submits an entity to the specified resource, often causing a change in state or side 
   effects on the server, usually creating a new resource
   PUT - method replaces all current representations of the target resource with the request 
   payload, updating everything for a resource
   PATCH - partially modify a resource - not really used much, put is more common for modifying 
   resources
   DELETE - delete a resource
2. API - Application Programming Interface - way for two or more computer programs or components 
   to communicate with each other
   JSON - JavaScript Object Notation - open standard file format and data interchange format 
   that uses human-readable text to store and transmit data objects consisting of attribute–value 
   pairs and arrays (or other serializable values). It istext data but JS is ready to parse it 
   into JS objects and vice versa. It is what the entire internet runs on.
3. AJAX - Asynchronous JavaScript and XML - allows web pages to be updated asynchronously by 
   exchanging data with a web server behind the scenes. It is possible to update parts of a web 
   page, without reloading the whole page. This is due to how browsers have a built in 
   XMLHttpRequest object, allowing asynchronous requests without reloading the page. 
   Asynchronous code is essential in JS, allowing code to run in the background, without blocking
   execution of other code. Simply put, it allows code blocks to execute at a future point in time. 
4. REST - Representational State Transfer - not a protocol or a standard, but an architectural 
   style of organizing our code so that requests act upon resources in a standardized way.
   resources - any information that can be named, such as a document or image, a temporal service, 
   a collection of other resources, a non-virtual object, and so on. In other words, any concept 
   that might be the target of an author’s hypertext reference must fit within the definition of a 
   resource. It is a conceptual mapping to a set of entities, not the entity that corresponds to the 
   mapping at any particular point in time. REST APIs use Uniform Resource Identifiers (URIs) to
   address them. 
a. URI: /posts, HTTP Method: GET
b. URI: /posts/{post's id}, HTTP Method: GET
c. URI: /posts, HTTP Method: POST
d. URI: /posts/{post's id}, HTTP Method: PUT or PATCH 
5. Hoisting (JS) - process in which variables and functions within each execution context are created
   before they are executed. In the preparation phase, all variables and functions are conceptually
   moved to the top of the execution context. Each execution context also creates its own variables 
   object, which contains details of all variables, functions, and parameters. This behavior can lead 
   to errors and unexpected results if the timing of declarations and executions is not properly 
   understood.
   Closures (JS) - ability of a function to remember the variables and functions that are declared in its
   outer scope, and can be used to achieve encapsulation. we can look up never down.

